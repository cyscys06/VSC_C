#include <bits/stdc++.h>
using namespace std;
string a, b;


int main()
{
    cin >> a >> b;
    vector<vector<int>> DP(a.size() + 1, vector<int>(b.size() + 1, 0));

    for (int i = 1; i < a.size() + 1; i++) // i: 문자열 a에 대한 이터레이터
    {
        for (int j = 1; j < b.size() + 1; j++) // j: 문자열 b에 대한 이터레이터
        {
            if (a[i - 1] == b[j - 1]) // 문자 같으면(a, b 각각의 이터레이터를 사용해서 비교하므로 문자열 길이가 서로 달라도 상관 없음. 
                                      //어차피 for문을 통해 문자열들의 모든 문자들을 한번씩 다 비교할 수 있게 됨)
            {
                DP[i][j] = DP [i - 1][j - 1] + 1; // dp 테이블에서 왼쪽 대각선에 있는 인덱스 값 + 1 하기
                                                  // 여기서 왼쪽 대각선이 의미하는 것: 현재 인덱스는 비교한 두 문자가 같은 상태. 즉 같은 그 문자를 LCS에 넣을 수 있음. 
                                                  // 맨 처음에 비교한 문자가 같은 경우가 나왔을때 LCS를 1 증가시켰고, 비교한 문자가 다를 경우에는 왼쪽이나 위쪽 인덱스중 큰 값을 가져옴으로써 
                                                  // LCS의 길이를 계속 증가시킨 것이므로 비교한 문자가 같던 다르던 LCS의 길이는 계속 보존되는 상태. 
                                                  // 비교한 문자가 같을때 왼쪽 대각선에 있는 인덱스 값에 1 증가시킨 값을 가지는게 곧 LCS의 길이를 1 증가시키는 것과 같음
            }
            else // 문자 다르면
            {
                DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]); // 현재 인덱스 기준으로 왼쪽, 위쪽의 인덱스 중 더 큰값을 가짐
            }
        }
    }

    cout << DP[a.size()][b.size()];

    return 0;
}